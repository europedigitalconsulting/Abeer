@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using System.Reflection

@inject NavigationManager Navigation
@inject LazyAssemblyLoader assemblyLoader

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="true" AdditionalAssemblies="@lazyLoadedAssemblies" OnNavigateAsync="@OnNavigateAsync">
        <Navigating>
            <div class="container-fluid">
                <div class="loader">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
            <link href="css/loading.css" rel="stylesheet" />
        </Navigating>
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        Navigation.NavigateTo($"subscription-pack");
                        <p>You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>

    </Router>
    <NavigationTracker />
</CascadingAuthenticationState>

@code
{
    private List<Assembly> lazyLoadedAssemblies = new List<Assembly>();

    private async Task OnNavigateAsync(NavigationContext args)
    {

        Console.WriteLine($"OnNavigateAsync path:{args.Path}");

        if (args.Path.StartsWith("ads/", StringComparison.OrdinalIgnoreCase))
        {
            var assemblies = await assemblyLoader.LoadAssembliesAsync(
                new List<string>() { "Abeer.UI_Ads.dll" });
            lazyLoadedAssemblies.AddRange(assemblies);
        }
        else if (args.Path.StartsWith("cards/", StringComparison.OrdinalIgnoreCase))
        {
            var assemblies = await assemblyLoader.LoadAssembliesAsync(
                new List<string>() { "Abeer.UI_Cards.dll" });
            lazyLoadedAssemblies.AddRange(assemblies);
        }
        else if (args.Path.StartsWith("contact/", StringComparison.OrdinalIgnoreCase))
        {
            var assemblies = await assemblyLoader.LoadAssembliesAsync(
                new List<string>() { "Abeer.UI_Contacts.dll" });
            lazyLoadedAssemblies.AddRange(assemblies);
        }
        else if (args.Path.Equals("agencies", StringComparison.OrdinalIgnoreCase))
        {
            var assemblies = await assemblyLoader.LoadAssembliesAsync(
                new List<string>() { "Abeer.UI_Admin.dll" });
            lazyLoadedAssemblies.AddRange(assemblies);
        }
        else if (args.Path.StartsWith("admin/", StringComparison.OrdinalIgnoreCase))
        {
            var assemblies = await assemblyLoader.LoadAssembliesAsync(
                new List<string>() { "Abeer.UI_Admin.dll" });
            lazyLoadedAssemblies.AddRange(assemblies);
        }
    }
}