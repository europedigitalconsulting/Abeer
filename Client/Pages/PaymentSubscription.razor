
@page "/payment-subscription/{SubscriptionId}"

@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject Microsoft.Extensions.Localization.IStringLocalizer<PaymentSubscription> Localizer
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

<div class="col-12">
    <div class="invoice">
        <div class="invoice-print">
            <div class="row">
                <div class="col-lg-12">
                    <div class="invoice-title">
                        <h2> @Localizer["LabelInvoice"]</h2>
                        <div class="invoice-number"> @Localizer["LabelOrderNumber"] @OrderNumber</div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-md-6">
                            <address>
                                <strong> @Localizer["LabelBilledTo"]</strong><br>
                                @User.FindFirstValue(ClaimTypes.Surname)  @User.FindFirstValue(ClaimTypes.GivenName) <br>
                                @User.FindFirstValue("LabelCity") <br />
                                @User.FindFirstValue("LabelCountry")
                            </address>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                        </div>
                        <div class="col-md-6 text-md-right">
                            <address>
                                <strong> @Localizer["LabelOrderDate"]</strong><br>
                                @DateTime.Now.ToLongDateString()<br><br>
                            </address>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="section-title"> @Localizer["LabelOrderSummary"]</div>
                    <p class="section-lead"> @Localizer["OrderSummaryCatchPhrase"]</p>
                    <div class="table-responsive">
                        <table class="table table-striped table-hover table-md">
                            <tr>
                                <th data-width="40">#</th>
                                <th> @Localizer["LabelItem"]</th>
                                <th class="text-center"> @Localizer["LabelPrice"]</th>
                                <th class="text-center"> @Localizer["LabelQuantity"]</th>
                                <th class="text-right"> @Localizer["LabelTotal"]</th>
                            </tr>
                            <tr>
                                <td>1</td>
                                <td> @SubPack?.Label</td>
                                <td class="text-center"> @SubPack?.Price</td>
                                <td class="text-center"> 1</td>
                                <td class="text-right"> @(SubPack?.Price * 1)</td>
                            </tr>
                        </table>
                    </div>
                    <div class="row mt-4">
                        <div class="col-lg-8">
                        </div>
                        <div class="col-lg-4 text-right">
                            <hr class="mt-2 mb-2">
                            <div class="invoice-detail-item">
                                <div class="invoice-detail-name">@Localizer["LabelTotal"]</div>
                                <div class="invoice-detail-value invoice-detail-value-lg">@SubPack?.Price</div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <div class="col-lg-8">
                        </div>
                        <div class="col-lg-4 text-right">
                            <hr class="mt-2 mb-2">
                            <div class="invoice-detail-item">
                                <div class="invoice-detail-name">@Localizer["VTA"]</div>
                                <div class="invoice-detail-value invoice-detail-value-lg">@VTA</div>
                            </div>
                        </div>
                    </div><div class="row mt-4">
                        <div class="col-lg-8">
                        </div>
                        <div class="col-lg-4 text-right">
                            <hr class="mt-2 mb-2">
                            <div class="invoice-detail-item">
                                <div class="invoice-detail-name">@Localizer["TTC"]</div>
                                <div class="invoice-detail-value invoice-detail-value-lg">@TTC</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <hr>
        <div class="text-md-right">
            <div class="float-lg-left mb-lg-0 mb-3">
                @if (cryptoPaymentViewModel?.EnableCryptoPayment == true)
                {
                    <CryptocoinPayment BeforeCallPayment="CreatePayment" CryptoConfig="cryptoPaymentViewModel"
                                       OrderNumber="@OrderNumber" Price="@SubPack.Price" Items=@Cart PagePaymentError="ConfirmPayment/Error"
                                       CssClass="btn btn-success btn-icon icon-left" LabelBtn="@Localizer["PayWithCrypto"]">
                    </CryptocoinPayment>
                }

                <button class="btn btn-primary btn-icon icon-left" @onclick="PaypalPayment">@Localizer["PayWithPaypal"]</button>

                <button class="btn btn-danger btn-icon icon-left" @onclick="GoToBack"><i class="fas fa-times"></i>@Localizer["Modify"]</button>
            </div>
        </div>
    </div>
</div>

@code{
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Parameter] public string SubscriptionId { get; set; }
    private string OrderNumber { get; set; }
    private List<Tuple<string, decimal>> Cart { get; set; } = new List<Tuple<string, decimal>>();
    private SubscriptionPack SubPack { get; set; } = new SubscriptionPack();
    private ClaimsPrincipal User;
    private CryptoPaymentModel cryptoPaymentViewModel;
    private decimal VTA { get; set; }
    private decimal TTC { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Random rnd = new Random();
        var authenticateSate = await AuthenticationStateTask;
        User = authenticateSate.User;
        OrderNumber = string.Concat(DateTime.UtcNow.ToString("yyyMMddHHmmss"), rnd.Next(100000, 999999));


        var httpClient = HttpClientFactory.CreateClient(Configuration["Service:Api:AnonymousApiName"]);

        await httpClient.PostAsJsonAsync<EventTrackingItem>("api/EventTracker", new EventTrackingItem
        {
            Category = "Subscription",
            Key = $"choose;{SubscriptionId}",
            CreatedDate = DateTime.UtcNow,
            Id = Guid.NewGuid(),
            UserId = User.FindFirstValue(ClaimTypes.NameIdentifier)
        });

        var resultConfig = await HttpClient.GetAsync($"/api/SubPack/GetConfigCrypto");

        if (resultConfig.IsSuccessStatusCode)
        {
            var jsonConfig = await resultConfig.Content.ReadAsStringAsync();
            cryptoPaymentViewModel = JsonConvert.DeserializeObject<CryptoPaymentModel>(jsonConfig);
        }
        else
        {
            NavigationManager.NavigateTo("/ConfirmPayment/Error", true);
            return;
        }
        Console.WriteLine($"/api/SubP" +
            $"ack/Get/{SubscriptionId}");
        var result = await HttpClient.GetAsync($"/api/SubPack/Get/{SubscriptionId}");

        if (result.IsSuccessStatusCode)
        {
            var json = await result.Content.ReadAsStringAsync();
            SubPack = JsonConvert.DeserializeObject<SubscriptionPack>(json);
            Cart.Add(new Tuple<string, decimal>(SubPack.Label, SubPack.Price));
            VTA = ((Decimal.Parse(cryptoPaymentViewModel.VTA) * SubPack.Price) / 100.00M);
            TTC = SubPack.Price + VTA;
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/ConfirmPayment/Error", true);
            return;
        }

        await base.OnInitializedAsync();
    }

    private async Task CreatePayment()
    {
        HttpClient.DefaultRequestHeaders.TryAddWithoutValidation("UserId", User.FindFirstValue(ClaimTypes.NameIdentifier));
        var result = await HttpClient.GetAsync($"/api/Payments/create-payment-subscribe/{SubPack.Id}/{OrderNumber}", HttpCompletionOption.ResponseContentRead);
        if (!result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/ConfirmPayment/Error", true);
            return;
        }
    }
    private async Task PaypalPayment()
    {
        var result = await HttpClient.PostAsJsonAsync<Subscription>($"api/Paypal/CreateSubscription/{OrderNumber}", new Subscription
        {
            CreateDate = DateTime.UtcNow,
            SubscriptionPack = SubPack,
            SubscriptionPackId = SubPack.Id,
            UserId = User.FindFirstValue(ClaimTypes.NameIdentifier)
        });

        result.EnsureSuccessStatusCode();

        var json = await result.Content.ReadAsStringAsync();
        var payment = JsonConvert.DeserializeObject<PaymentModel>(json);
        NavigationManager.NavigateTo($"/api/paypal/pay/{payment.Id}", true);
    }
    private void GoToBack()
    {
        NavigationManager.NavigateTo("subscription-pack", true);
    }
}