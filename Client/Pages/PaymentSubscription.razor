@page "/payment-subscription/{SubscriptionId}"

@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject Microsoft.Extensions.Localization.IStringLocalizer<PaymentSubscription> Localizer
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

<div class="section mt-5">
    <div class="row align-items-center">
        <div class="col-sm-12 col-md-7 pt-3">
            <header>
                <h4 class=" " style="color:#97AABD;font-weight:400">@Localizer["LabelInvoice"]</h4>
                <div style="margin-left: -20px; border: 2px solid #02BF8A; width: 25px;"></div>
                <br />
            </header>
        </div>
        <div class="col-sm-12 col-md-5 text-right invoice-number">
            <span class="btn" style="font-weight:300;color:white;background:#F4957D">@Localizer["LabelOrderNumber"] @OrderNumber</span>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-lg-12">
            <div class="row">
                <div class="col-6">
                    <address>
                        <strong> @Localizer["LabelBilledTo"]</strong><br>
                        @User.FindFirstValue(ClaimTypes.Surname)  @User.FindFirstValue(ClaimTypes.GivenName) <br>
                        @User.FindFirstValue("city") <br />
                        @User.FindFirstValue("country")
                    </address>
                </div>
                <div class="col-6 text-right">
                    <address>
                        <strong> @Localizer["LabelOrderDate"]</strong><br>
                        @DateTime.Now.ToLongDateString()<br><br>
                    </address>
                </div>
            </div>
        </div>
    </div>

    <div class="row ">
        <div class="col-md-12">
            <div class="section-title mt-4"> @Localizer["LabelOrderSummary"]</div>
            <p class="section-lead mt-2"> @Localizer["OrderSummaryCatchPhrase"]</p>
            @*<div class="table-responsive">
                <table class="table table-striped table-hover table-md">
                    <tr>
                        <th data-width="40">#</th>
                        <th> @Localizer["LabelItem"]</th>
                        <th class="text-center"> @Localizer["LabelPrice"]</th>
                        <th class="text-center"> @Localizer["LabelQuantity"]</th>
                        <th class="text-right"> @Localizer["LabelTotal"]</th>
                    </tr>
                    <tr>
                        <td>1</td>
                        <td> @SubPack?.Label</td>
                        <td class="text-center"> @SubPack?.Price</td>
                        <td class="text-center"> 1</td>
                        <td class="text-right"> @(SubPack?.Price * 1)</td>
                    </tr>
                </table>
            </div>*@
            <div class="row mt-5">
                <div class="col-10">
                    @Localizer["LabelTotal"]
                </div>
                <div class="col-2 text-right">
                    @SubPack?.Price
                </div>
            </div>
            <hr class="my-2">
            <div class="row mb-4">
                <div class="col-10">
                    @Localizer["VTA"]
                </div>
                <div class="col-2 text-right">
                    @VTA
                </div>
            </div>
            <hr class="my-2">
            <div class="row">
                <div class="col-10">
                    @Localizer["TTC"]
                </div>
                <div class="col-2 text-right">
                    @TTC
                </div>
            </div>
        </div>
    </div> 
    <div class="text-md-right">
        <div class="float-right mb-lg-0 mb-3">
            @if (cryptoPaymentViewModel?.EnableCryptoPayment == true)
            {
                <CryptocoinPayment BeforeCallPayment="CreatePayment" CryptoConfig="cryptoPaymentViewModel"
                                   OrderNumber="@OrderNumber" Price="@SubPack.Price" Items=@Cart PagePaymentError="ConfirmPayment/Error"
                                   CssClass="btn btn-success btn-icon icon-left" LabelBtn="@Localizer["PayWithCrypto"]">
                </CryptocoinPayment>
            }

            <button class="btn btn-primary btn-icon icon-left mt-4" @onclick="PaypalPayment">@Localizer["PayWithPaypal"]</button>
        </div>
    </div>
</div>

@code{
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Parameter] public string SubscriptionId { get; set; }
    private string OrderNumber { get; set; }
    private List<Tuple<string, decimal>> Cart { get; set; } = new List<Tuple<string, decimal>>();
    private SubscriptionPack SubPack { get; set; } = new SubscriptionPack();
    private ClaimsPrincipal User;
    private CryptoPaymentModel cryptoPaymentViewModel;
    private decimal VTA { get; set; }
    private decimal TTC { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Random rnd = new Random();
        var authenticateSate = await AuthenticationStateTask;
        User = authenticateSate.User;
        OrderNumber = string.Concat(DateTime.UtcNow.ToString("yyyMMddHHmmss"), rnd.Next(100000, 999999));


        var httpClient = HttpClientFactory.CreateClient(Configuration["Service:Api:ApiName"]);

        await httpClient.PostAsJsonAsync<EventTrackingItem>("api/EventTracker", new EventTrackingItem
        {
            Category = "Subscription",
            Key = $"choose;{SubscriptionId}",
            CreatedDate = DateTime.UtcNow,
            Id = Guid.NewGuid(),
            UserId = User.FindFirstValue(ClaimTypes.NameIdentifier)
        });

        var resultConfig = await HttpClient.GetAsync($"/api/SubPack/GetConfigCrypto");

        if (resultConfig.IsSuccessStatusCode)
        {
            var jsonConfig = await resultConfig.Content.ReadAsStringAsync();
            cryptoPaymentViewModel = JsonConvert.DeserializeObject<CryptoPaymentModel>(jsonConfig);
        }
        else
        {
            NavigationManager.NavigateTo("/ConfirmPayment/Error", true);
            return;
        }

        var result = await HttpClient.GetAsync($"/api/SubPack/Get/{SubscriptionId}");

        if (result.IsSuccessStatusCode)
        {
            var json = await result.Content.ReadAsStringAsync();
            SubPack = JsonConvert.DeserializeObject<SubscriptionPack>(json);
            Cart.Add(new Tuple<string, decimal>(SubPack.Label, SubPack.Price));
            VTA = ((Decimal.Parse(cryptoPaymentViewModel.VTA) * SubPack.Price) / 100.00M);
            TTC = SubPack.Price + VTA;
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/ConfirmPayment/Error", true);
            return;
        }

        await base.OnInitializedAsync();
    }

    private async Task CreatePayment()
    {
        HttpClient.DefaultRequestHeaders.TryAddWithoutValidation("UserId", User.FindFirstValue(ClaimTypes.NameIdentifier));
        var result = await HttpClient.GetAsync($"/api/Payments/create-payment-subscribe/{SubPack.Id}/{OrderNumber}", HttpCompletionOption.ResponseContentRead);
        if (!result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/ConfirmPayment/Error", true);
            return;
        }
    }
    private async Task PaypalPayment()
    {
        var result = await HttpClient.PostAsJsonAsync<Subscription>($"api/Paypal/CreateSubscription/{OrderNumber}", new Subscription
        {
            CreateDate = DateTime.UtcNow,
            SubscriptionPack = SubPack,
            SubscriptionPackId = SubPack.Id,
            UserId = User.FindFirstValue(ClaimTypes.NameIdentifier)
        });

        result.EnsureSuccessStatusCode();

        var json = await result.Content.ReadAsStringAsync();
        var payment = JsonConvert.DeserializeObject<PaymentModel>(json);
        NavigationManager.NavigateTo($"/api/paypal/pay/{payment.Id}", true);
    }
    private void GoToBack()
    {
        NavigationManager.NavigateTo("subscription-pack", true);
    }
}