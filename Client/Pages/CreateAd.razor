@page "/CreateAd"
@using Abeer.Shared.Functional
@inject Microsoft.Extensions.Localization.IStringLocalizer<CreateAd> Loc
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@using BlazorInputFile
@inject IJSRuntime jsRuntime
@code
{
    public string Step { get; set; } = "Step1";
    public AdModel Ad { get; set; } = new AdModel();
    public AdPrice CurrentPrice { get; set; } = new AdPrice();
    const int MaxFileSizeMB = 5;
    const int MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB
    private string dropClass = "";
    private bool fileSizeError = false;
    private bool fileTypeError = false;
    private List<IFileListEntry> selectedFiles = new List<IFileListEntry>();

    public List<AdPrice> AdPrices { get; set; } = new List<AdPrice>();

    async Task Step2()
    {
        Step = "Step2";

        var httpClient = HttpClientFactory.CreateClient("Abeer.Anonymous");
        var getAll = await httpClient.GetAsync("/api/adprice");
        getAll.EnsureSuccessStatusCode();
        var json = await getAll.Content.ReadAsStringAsync();
        AdPrices = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Abeer.Shared.Functional.AdPrice>>(json);

        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    async Task SelectPrice(AdPrice currentPrice)
    {
        CurrentPrice = currentPrice;
        Step = "Step3";
        await InvokeAsync(StateHasChanged);
    }

    bool PublishHasError;

    async Task ValidAd()
    {
        var CreateAdRequest = new CreateAdRequestViewModel
        {
            Ad = Ad,
            Price = CurrentPrice
        };

        var response = await InsertAd(CreateAdRequest);

        if (!PublishHasError)
        {
            var json = await response.Content.ReadAsStringAsync();
            var Ad = Newtonsoft.Json.JsonConvert.DeserializeObject<AdModel>(json);
            NavigationManager.NavigateTo($"/ValidAd/{Ad.Id}", true);
        }

        await InvokeAsync(StateHasChanged);
    }

    async Task<HttpResponseMessage> InsertAd(CreateAdRequestViewModel CreateAdRequest)
    {
        if (selectedFiles?.Any() == true)
        {
            CreateAdRequest.Files = selectedFiles.Select(f =>
            {
                using var ms = new System.IO.MemoryStream();
                f.Data.CopyTo(ms);
                
                var file = new FileData
                {
                    Name = f.Name,
                    Size = f.Size,
                    Type = f.Type,
                    LastModified = f.LastModified,
                    Data = ms.ToArray()
                };

                return file;
            }).ToList();
        }
        else
        {
            CreateAdRequest.Files = new List<FileData>();
        }

        var httpClient = HttpClientFactory.CreateClient("Abeer.Anonymous");
        var response = await httpClient.PostAsJsonAsync<CreateAdRequestViewModel>("/api/Ad", CreateAdRequest);
        PublishHasError = !response.IsSuccessStatusCode;
        return response;
    }

    async Task ProcessPayment()
    {
        var CreateAdRequest = new CreateAdRequestViewModel
        {
            Ad = Ad,
            Price = CurrentPrice
        };

        var httpClient = HttpClientFactory.CreateClient("Abeer.Anonymous");
        var response = await httpClient.PostAsJsonAsync<CreateAdRequestViewModel>("/api/Ad", CreateAdRequest);
        PublishHasError = !response.IsSuccessStatusCode;

        if (!PublishHasError)
        {
            var json = await response.Content.ReadAsStringAsync();
            var Ad = Newtonsoft.Json.JsonConvert.DeserializeObject<AdModel>(json);
            NavigationManager.NavigateTo(NavigationManager.ToAbsoluteUri($"PayAd/{Ad.Id}").ToString(), true);
        }

        await InvokeAsync(StateHasChanged);
    }

    private void HandleDragEnter()
    {
        dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleFileInputChange(IFileListEntry[] files)
    {
        dropClass = "";
        fileSizeError = false;
        fileTypeError = false;
        List<string> acceptedFileTypes = new List<string>() { "image/png", "image/jpeg", "image/gif" };
        if (files != null)
        {
            foreach (var file in files)
            {
                bool error = false;
                if (file.Size > MaxFileSize)
                {
                    error = true;
                    fileSizeError = true;
                }

                if (!acceptedFileTypes.Contains(file.Type))
                {
                    error = true;
                    fileTypeError = true;
                }

                //keep the good files
                if (!error)
                {
                    selectedFiles.Add(file);
                }
            }
        }
    }

    private void RemoveFile(IFileListEntry file)
    {
        selectedFiles.Remove(file);
    }
}

@if (Step == "Step1")
{
    <section class="section">
        <div class="section-header">
            <h1>@Loc["Title"]</h1>
        </div>
        <div class="card">
            <div class="card-body">
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["AdTitle"]</label>
                    <input type="text" Class="form-control" @bind="Ad.Title" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["Description"]</label>
                    <textarea type="text" Class="form-control" rows="6" @bind="Ad.Description" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["Price"]</label>
                    <input type="number" Class="form-control" @bind="Ad.Price" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["Url1"]</label>
                    <input type="url" Class="form-control" @bind="Ad.Url1" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["Url2"]</label>
                    <input type="url" Class="form-control" @bind="Ad.Url2" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["Url3"]</label>
                    <input type="url" Class="form-control" @bind="Ad.Url3" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["Url4"]</label>
                    <input type="url" Class="form-control" @bind="Ad.Url4" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <div class="dropzone @dropClass rounded">
                        <InputFile id="fileInput" multiple title=""
                                   OnChange="HandleFileInputChange"
                                   accept="image/png,image/gif,image/jpeg"
                                   @ondragenter="HandleDragEnter"
                                   @ondragleave="HandleDragLeave" />
                        Upload images
                    </div>
                    @if ((fileTypeError || fileSizeError))
                    {
                        <ul class="validation-errors mb-0">
                            @if (fileTypeError)
                            {
                                <li class="validation-message">Only image files are accepted.</li>
                            }
                            @if (fileSizeError)
                            {
                                <li class="validation-message">The max file size is @MaxFileSizeMB MB.</li>
                            }
                        </ul>
                    }
                    @if (selectedFiles != null && selectedFiles.Count > 0)
                    {
                        <div class="col-12">
                            <ul>
                                @foreach (var file in selectedFiles)
                                {
                                    <li>
                                        @file.Name
                                        <button class="btn btn-link text-danger p-0 pl-1" type="button"
                                                @onclick="@(e => RemoveFile(file))">
                                            <small class="align-text-bottom">Remove</small>
                                        </button>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-success" @onclick="Step2"><i class="fas fa-upload"></i>@Loc["StartPublish"]</button>
                    <a href="Ads" class="btn btn-warning">@Loc["Cancel"]</a>
                </div>
            </div>
        </div>
    </section>
}
else if (Step == "Step2")
{
    <section class="section">
        <div class="section-header">
            <h1>@Loc["Title"]</h1>
            <h2>@Ad.Title</h2>
        </div>
        <div class="card">
            <div class="card-body">
                @foreach (var price in AdPrices)
                {
                    <div class="col-lg-3 col-md-3 col-sm-12">
                        <div class="card profile-widget border">
                            <div class="profile-widget-header">
                                <h4>@price.PriceName</h4>
                            </div>
                            <div class="profile-widget-description pb-0">
                                <div class="profile-widget-name">@price.PriceDescription</div>
                            </div>
                            <button type="submit" class="btn btn-success" @onclick="@(async ()=>await SelectPrice(price))">@Loc["Select"]</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </section>
}
else if (Step == "Step3")
{
    <section class="section">
        <div class="section-header">
            <h1>@Loc["Title"]</h1>
            <h2>@Ad.Title</h2>
        </div>
        <div class="card">
            <div class="card-body">
                @if (PublishHasError)
                {
                    <div class="alert alert-danger">
                        @Loc["PublishError"]
                    </div>
                }
                <h3>@Loc["Summary"]</h3>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["AdTitle"]</label>
                    <input type="text" Class="form-control" @bind="Ad.Title" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["Description"]</label>
                    <textarea type="text" Class="form-control" rows="6" @bind="Ad.Description" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["Price"]</label>
                    <input type="number" Class="form-control" @bind="Ad.Price" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["Url1"]</label>
                    <input type="url" Class="form-control" @bind="Ad.Url1" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["Url2"]</label>
                    <input type="url" Class="form-control" @bind="Ad.Url2" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["Url3"]</label>
                    <input type="url" Class="form-control" @bind="Ad.Url3" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <label>@Loc["Url4"]</label>
                    <input type="url" Class="form-control" @bind="Ad.Url4" />
                </div>
                <div class="form-group col-6 col-sm-12">
                    <div class="dropzone @dropClass rounded">
                        <InputFile id="fileInput" multiple title=""
                                   OnChange="HandleFileInputChange"
                                   accept="image/png,image/gif,image/jpeg"
                                   @ondragenter="HandleDragEnter"
                                   @ondragleave="HandleDragLeave" />
                        Upload images
                    </div>
                    @if ((fileTypeError || fileSizeError))
                    {
                        <ul class="validation-errors mb-0">
                            @if (fileTypeError)
                            {
                                <li class="validation-message">Only image files are accepted.</li>
                            }
                            @if (fileSizeError)
                            {
                                <li class="validation-message">The max file size is @MaxFileSizeMB MB.</li>
                            }
                        </ul>
                    }
                    @if (selectedFiles != null && selectedFiles.Count > 0)
                    {
                        <div class="col-12">
                            <ul>
                                @foreach (var file in selectedFiles)
                                {
                                    <li>
                                        @file.Name
                                        <button class="btn btn-link text-danger p-0 pl-1" type="button"
                                                @onclick="@(e => RemoveFile(file))">
                                            <small class="align-text-bottom">Remove</small>
                                        </button>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </div>
                <div class="col-lg-3 col-md-3 col-sm-12">
                    <div class="card profile-widget border">
                        <div class="profile-widget-header">
                            <h4>@CurrentPrice.PriceName</h4>
                        </div>
                        <div class="profile-widget-description pb-0">
                            <div class="profile-widget-name">@CurrentPrice.PriceDescription</div>
                        </div>
                    </div>
                </div>
                <div class="alert alert-info">
                    @Loc["RequireLogin"]
                </div>
                <div class="form-group">
                    @if (CurrentPrice.Value == 0)
                    {
                        <button type="submit" class="btn btn-success" @onclick="@(async () => await ValidAd())"><i class="fas fa-upload"></i>@Loc["ValidAd"]</button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-success" @onclick="@(async () => await ProcessPayment())"><i class="far fa-credit-card"></i>@Loc["ProcessPayment"]</button>
                    }
                </div>
            </div>
        </div>
    </section>
}