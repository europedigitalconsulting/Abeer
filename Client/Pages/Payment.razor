@page "/payment/{OrderNumber}"

@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject IHttpClientFactory HttpClientFactory
@inject Microsoft.Extensions.Localization.IStringLocalizer<Payment> Localizer
@inject NavigationManager NavigationManager

@if (Ad?.AdPrice != null)
{
    <div class="col-12">
        <div class="invoice">
            <div class="invoice-print">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="invoice-title">
                            <h2> @Localizer["LabelInvoice"]</h2>
                            <div class="invoice-number"> @Localizer["LabelOrderNumber"] @Ad.OrderNumber</div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col-md-6">
                                <address>
                                    <strong> @Localizer["LabelBilledTo"]:</strong><br>
                                    ##BilledTo<br>
                                    ##BilledToAddress<br>
                                    ##BilledToCity
                                </address>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <address>
                                    <strong> @Localizer["LabelPaymentMethod"]:</strong><br>
                                    CryptoCoin
                                </address>
                            </div>
                            <div class="col-md-6 text-md-right">
                                <address>
                                    <strong> @Localizer["LabelOrderDate"]:</strong><br>
                                    @Ad.CreateDate.ToLongDateString()<br><br>
                                </address>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-md-12">
                        <div class="section-title"> @Localizer["LabelOrderSummary"]</div>
                        <p class="section-lead"> @Localizer["OrderSummaryCatchPhrase"]</p>
                        <div class="table-responsive">
                            <table class="table table-striped table-hover table-md">
                                <tr>
                                    <th data-width="40">#</th>
                                    <th> @Localizer["LabelItem"]</th>
                                    <th class="text-center"> @Localizer["LabelPrice"]</th>
                                    <th class="text-center"> @Localizer["LabelQuantity"]</th>
                                    <th class="text-right"> @Localizer["LabelTotal"]</th>
                                </tr>
                                <tr>
                                    <td>1</td>
                                    <td> @Ad.AdPrice?.PriceName</td>
                                    <td class="text-center"> @Ad.AdPrice?.Value</td>
                                    <td class="text-center"> 1</td>
                                    <td class="text-right"> @Ad.AdPrice?.Value</td>
                                </tr>
                            </table>
                        </div>
                        <div class="row mt-4">
                            <div class="col-lg-8">
                            </div>
                            <div class="col-lg-4 text-right">
                                <hr class="mt-2 mb-2">
                                <div class="invoice-detail-item">
                                    <div class="invoice-detail-name">Total</div>
                                    <div class="invoice-detail-value invoice-detail-value-lg"> @Ad.AdPrice?.Value</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <hr>
            <div class="text-md-right">
                <div class="float-lg-left mb-lg-0 mb-3">
                    @if (true)
                    {
                        <CryptocoinPayment ClientId="client_id_mvc" ClientSecret="client_secret_mvc" BeforeCallPayment="CreatePayment"
                                           OrderNumber="@Ad.OrderNumber" Price="@Ad.AdPrice.Value" Items=@Cart
                                           CssClass="btn btn-success btn-icon icon-left" DomainApiPayment="https://localhost:5001"
                                           RedirectSuccessServer="https://localhost:7001/api/Cryptocoin/ProcessingCryptoCoinSuccess"
                                           RedirectErrorServer="https://localhost:7001/api/Cryptocoin/ProcessingCryptoCoinFailed"
                                           RedirectSuccess="https://localhost:7001/ConfirmPayment/Success"
                                           RedirectError="https://localhost:7001/ConfirmPayment/Error">
                        </CryptocoinPayment>
                    }
                    else
                    {

                        <button class="btn btn-danger btn-icon icon-left" @onclick="PaypalPayment"><i class="fas fa-times"></i>Paypal</button>

                    }

                    <button class="btn btn-danger btn-icon icon-left" @onclick="GoToBack"><i class="fas fa-times"></i>@Localizer["LabelCancel"]</button>
                </div>
            </div>
        </div>
    </div>
}

@code{
    [Parameter] public string OrderNumber { get; set; }
    private List<Tuple<string, decimal>> Cart { get; set; } = new List<Tuple<string, decimal>>();
    private AdModel Ad { get; set; } = new AdModel();

    protected override async Task OnInitializedAsync()
    {

        var httpClient = HttpClientFactory.CreateClient("Abeer.ServerAPI");
        var getInvoice = await httpClient.GetAsync($"/api/Payments/GetInvoice/{OrderNumber}");
        if (getInvoice.IsSuccessStatusCode)
        {
            var json = await getInvoice.Content.ReadAsStringAsync();
            Ad = JsonConvert.DeserializeObject<AdModel>(json);

            var tmp = new Tuple<string, decimal>(Ad.AdPrice.PriceName, Ad.AdPrice.Value);
            Cart.Add(tmp);
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo(NavigationManager.ToAbsoluteUri("/").ToString(), true);
        }
        await base.OnInitializedAsync();
    }

    private async Task CreatePayment()
    {
        var httpClient = HttpClientFactory.CreateClient("Abeer.ServerAPI");
        var result = await httpClient.GetAsync($"/api/Payments/Create/{Ad.Id}", HttpCompletionOption.ResponseContentRead);
        if (!result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("https://localhost:7001/ConfirmPayment/Error", true);
        }
    }
    private void PaypalPayment()
    {
        NavigationManager.NavigateTo(NavigationManager.ToAbsoluteUri($"/api/Paypal/Create/{Ad.Id}").ToString(), true);
    }
    private void GoToBack()
    {
        NavigationManager.NavigateTo("/", true);
    }
}