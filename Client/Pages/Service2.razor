@page "/services"
@inject IJSRuntime jsRuntime
@using System.Security.Claims
@inject Microsoft.Extensions.Localization.IStringLocalizer<Services> Loc

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authenticateState { get; set; }
    private List<CardServiceViewModel> ListService { get; set; } = new List<CardServiceViewModel>();
    private CardServiceViewModel CurrentCard { get; set; } = new CardServiceViewModel();
    public bool IsAdmin { get; set; }
    public bool IsLarge { get; set; } = false;
    public bool IsMedium { get; set; } = false;
    public bool IsSmall { get; set; } = false;

    (TouchPoint ReferencePoint, DateTime StartTime) startPoint;

    protected override async Task OnInitializedAsync()
    {

        authenticateState = await authenticationStateTask;

        if (authenticateState.User?.Identity.IsAuthenticated == true)
        {
            IsAdmin = (authenticateState.User.Identity.IsAuthenticated && authenticateState.User.HasClaim(ClaimTypes.Role, "admin"));
        }
        ListService = new List<CardServiceViewModel>
{
            new CardServiceViewModel{ PageName = "profil", ImageUrl = "Profil.svg", Title = Loc["Title_profil"], Description = IsSmall ? "Consulter ou modifier vos informations personnelles" : Loc["Business_description"] },
            new CardServiceViewModel{  PageName = "list", ImageUrl = "Contact.svg", Title = Loc["Title_contact"], Description = Loc["Cards_description"]},
            new CardServiceViewModel{  PageName = "myads", ImageUrl = "Annonces.svg", Title = Loc["Title_ads"], Description = Loc["ad_description"]},
            new CardServiceViewModel{  PageName = "agencies", ImageUrl = "Magasins.svg", Title = Loc["Title_agencies"], Description = Loc["Agencies_description"]},
            new CardServiceViewModel{  PageName = "subscription-pack", ImageUrl = "Abonnements.svg", Title = Loc["Title_subscribe"], Description = Loc["Subscribe"] },
        }; 
        CurrentCard = ListService?.First();
    }
    private void PreviousCard()
    {
        var tmp = ListService.FindIndex(i => i.Equals(CurrentCard));
        if (tmp - 1 > -1)
            CurrentCard = ListService[tmp - 1];
        else
            CurrentCard = ListService[ListService.Count - 1];

        StateHasChanged();
    }
    private void NextCard()
    {
        var tmp = ListService.IndexOf(CurrentCard);
        if (tmp + 1 < ListService.Count)
            CurrentCard = ListService[tmp + 1];
        else
            CurrentCard = ListService[0];

        StateHasChanged();
    }
    private void ChangeCard(CardServiceViewModel card)
    {
        CurrentCard = card;
        StateHasChanged();
    }
    private void HandleTouchStart(TouchEventArgs args)
    {
        startPoint.ReferencePoint = args.TargetTouches[0];
        startPoint.StartTime = DateTime.Now;
    }
    private void HandleTouchEnd(TouchEventArgs args)
    {
        var endReference = args.ChangedTouches[0];
        var endTime = DateTime.Now;

        var diffX = startPoint.ReferencePoint.ClientX - endReference.ClientX;
        var diffTime = DateTime.Now - startPoint.StartTime;
        var velocityX = Math.Abs(diffX / diffTime.Milliseconds);

        var swipeThreshold = 0.8;

        if (velocityX < swipeThreshold) return;

        if (velocityX >= swipeThreshold)
        {
            if (diffX < 0)
                PreviousCard();
            else
                NextCard();
        }
    }

}
<section class="section">
    <div class="section-body ">
        <div class="row justify-content-center">

            <MediaQuery Media="@Breakpoints.LargeUp" @bind-Matches="IsLarge" />
            <MediaQuery Media="@Breakpoints.MediumUp" @bind-Matches="IsMedium" />
            <MediaQuery Media="@Breakpoints.SmallDown" @bind-Matches="IsSmall" />
            @if (IsLarge || IsMedium)
            {
                @foreach (var item in ListService)
                {
                    @if (!item.AuthenticationRequired || (item.AuthenticationRequired && authenticateState?.User?.Identity.IsAuthenticated == false))
                    {
                        <div class="col-lg-2 col-md-4 col-sm-6 mt-4 d-flex">
                            <div class="profile-widget">
                                <div class=" profile-widget-header" style="border-radius: 30px; box-shadow: 0px 3px 4px 1px lightgrey; padding: 22px;">
                                    <img class="w-100" src="/assets/img/services/@item.ImageUrl" />
                                </div>
                                <div class="text-center profile-widget-description">
                                    <h4 class="text-dark">@item.Title</h4>
                                    <p style="min-height:170px" class="text-muted">@item.Description</p>
                                </div>
                                <div class="text-center pb-3">
                                    <a class="pl-5 pr-5 btn text-decoration-none" style="box-shadow: 0px 6px 25px -5px lightgrey; background-color: #F1F8FF" href="@item.PageName">
                                        @Loc["Discover"]
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                }
            }
            else
            {
                <div class="col-md-4 col-sm-4 position-relative">
                    <div class="card profile-widget ">
                        <div class="position-absolute" style="top:30%" @onclick="PreviousCard">
                            <img src="/assets/img/services/Iconly-Bulk-Arrow - Left.svg" />
                        </div>
                        <div class="position-absolute" style="top:30%;right:0" @onclick="NextCard">
                            <img src="/assets/img/services/Iconly-Bulk-Arrow - Right.svg" />
                        </div>
                        <div class="row justify-content-center" @ontouchmove:preventDefault="true" @ontouchstart="HandleTouchStart" @ontouchend="HandleTouchEnd">
                            <img style="width:calc(90vw);" class="m-0 p-0" src="/assets/img/services/@CurrentCard.ImageUrl" />
                        </div>
                        <div class="text-center mt-3">
                            <h4 class="text-dark" style="font-size: 28px;font-weight:600;">@CurrentCard.Title</h4>
                        </div>
                        <div class="text-center mb-0" style="height: 70px">
                            <p class="offset-1 col-10 text-muted" style="font-size: 12px; line-height: 17px;">@CurrentCard.Description</p>
                        </div>

                        <div class="row justify-content-center mb-4">
                            <div class="m-0 p-0">
                                @foreach (var item in ListService)
                                {
                                    <span class="mr-1 @(item == CurrentCard ? "disc" : "circle")" style="display: inline-block;" @onclick="() => ChangeCard(item)"></span>
                                }
                            </div>
                        </div>
                        <div class="justify-content-lg-center pb-4"> 
                              <a href="@CurrentCard.PageName" class="mt-2 pt-2 pb-2 btn btn-success text-decoration-none col-12">
                                @Loc["Discover"]
                            </a><br /><br />
                                      <a href="/Identity/Account/register" class="pt-2 pb-2 btn btn-warning text-decoration-none col-12" style="border-radius:15px;">
                                          @Loc["Login"]
                                      </a>
                            <a href="/Identity/Account/register" class="pl-0 pt-2 pb-2 text-decoration-none col-3">
                                <img class="pt-2 pb-2" src="/assets/img/services/macarte_sm.svg" style=" box-shadow: 0px 5px 35px 0px lightgrey;
        padding-left: 10px;
        border-radius: 0px 0px 19px 19px;
        background: #F5F8FA;" />
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>
