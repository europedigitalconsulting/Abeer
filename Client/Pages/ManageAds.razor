@page "/ManageAds"
@using System.Security.Claims
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject HttpClient HttpClient
@inject Microsoft.Extensions.Localization.IStringLocalizer<ManageAds> Loc

@code
{
        bool ModalFormAdVisible;
        bool FormHasError;

        string TitleForm = "EditForm";
        string Mode = "Insert";

        Abeer.Shared.Functional.AdModel Current = new Abeer.Shared.Functional.AdModel();

    public string Term { get; set; }

    List<Abeer.Shared.Functional.AdModel> All = new List<Abeer.Shared.Functional.AdModel>();
    List<Abeer.Shared.Functional.AdModel> Items = new List<Abeer.Shared.Functional.AdModel>();

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject] private NavigationManager navigationManager { get; set; }

    void countTerm(KeyboardEventArgs e)
    {
        if (Term.Length > 5)
            Search();
    }

    protected override async Task OnInitializedAsync()
    {
        var authenticateSate = await authenticationStateTask;

        Console.WriteLine("User claims");

        if (!authenticateSate.User.Identity.IsAuthenticated || !authenticateSate.User.HasClaim(ClaimTypes.Role, "admin"))
        {
            Console.WriteLine("User is not admin, redirect to login");
            navigationManager.NavigateTo("/authentication/Login", true);
        }

        var getAll = await HttpClient.GetAsync("/api/ad/admin");
        getAll.EnsureSuccessStatusCode();
        var json = await getAll.Content.ReadAsStringAsync();
        All = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Abeer.Shared.Functional.AdModel>>(json);
        Items = All.ToList();
    }

    void Search()
    {
        Items = All.Where(a => a.Title.Contains(Term) || a.Description.Contains(Term)).ToList();
    }

    void OpenEditModal(Abeer.Shared.Functional.AdModel adModel)
    {
        Current = adModel;
        Mode = "Edit";
        ModalFormAdVisible = true;
    }

    void OpenDeleteModal(Abeer.Shared.Functional.AdModel adModel)
    {
        Current = adModel;
        Mode = "Delete";
        ModalFormAdVisible = true;
    }

    void OpenCreateAd()
    {
        Current = new Abeer.Shared.Functional.AdModel();
        Current.StartDisplayTime = DateTime.UtcNow;
        Mode = "Insert";
        ModalFormAdVisible = true;
    }

    string FormError = "";

    async Task Save()
    {
        FormHasError = false;
        FormError = "";

        switch (Mode)
        {
            case "Insert":
                {
                    var postResponse = await HttpClient.PostAsJsonAsync<Abeer.Shared.Functional.AdModel>("/api/ad/admin", Current);
                    FormHasError = !postResponse.IsSuccessStatusCode;

                    if (FormHasError)
                        FormError = postResponse.ReasonPhrase;
                    else
                    {
                        All.Add(Current);
                        Items.Add(Current);
                        Current = new Abeer.Shared.Functional.AdModel();
                        ModalFormAdVisible = false;
                    }

                    break;
                }
            case "Edit":
                {
                    var putResponse = await HttpClient.PutAsJsonAsync<Abeer.Shared.Functional.AdModel>("/api/ad/admin", Current);
                    FormHasError = !putResponse.IsSuccessStatusCode;

                    if (FormHasError)
                    {
                        FormError = putResponse.ReasonPhrase;
                    }
                    else
                    {
                        Current = new Abeer.Shared.Functional.AdModel();
                        ModalFormAdVisible = false;
                    }
                    break;
                }
            case "Delete":
                {
                    var deleteResponse = await HttpClient.DeleteAsync($"/api/ad/{Current.Id}");
                    FormHasError = deleteResponse.IsSuccessStatusCode;

                    if (FormHasError)
                    {
                        FormError = deleteResponse.ReasonPhrase;
                    }
                    else
                    {
                        Current = new Abeer.Shared.Functional.AdModel();
                        ModalFormAdVisible = false;
                    }
                    break;
                }
        }
    }
    bool IsFormDisabled => Mode == "Delete";
}
@if (ModalFormAdVisible)
{
    <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@Loc[TitleForm]</h4>
                </div>
                <div class="modal-body">
                    <section class="section">
                        <div class="section-header">
                            <h1>@Loc["EditAdTitle"]</h1>
                            <h2>@Current.Title</h2>
                        </div>
                        <div class="card">
                            <div class="card-body">
                                <FormAd Current="Current" Loc="Loc" Disabled="@(Mode == "Delete")" FormError="@FormError" FormHasError="@FormHasError"></FormAd>
                            </div>
                        </div>
                    </section>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-warning" @onclick="@(() => ModalFormAdVisible = false)">@Loc["Cancel"]</button>
                    <button type="button" class="btn btn-success" @onclick="Save">@Loc["Save"]</button>
                </div>
            </div>
        </div>
    </div>
}
<section class="section">
    <div class="section-header">
        <h1>@Loc["Title"]</h1>
        <div class="input-group">
            <input type="search" id="example-input1-group2" name="example-input1-group2" class="form-control" @bind="Term" @onkeyup="countTerm">
            <span class="input-group-btn">
                <button type="button" class="btn btn-lg" @onclick="Search"><i class="fa fa-2x  fa-search"></i></button>
            </span>
            <div class="search-backdrop"></div>
        </div>
    </div>
    <div class="section-body">
        <div class="row">
            <div class="col-12">
                @foreach (var ad in Items)
                {
                    <CardAd Ad="ad" Editable="true" Loc="Loc" OnEditClicked="@(()=>OpenEditModal(ad))" OnDeleteClicked="@(()=>OpenDeleteModal(ad))"></CardAd>
                }
                <button class="btn btn-lg btn-info" @onclick="OpenCreateAd"><i class="fas fa-upload" style="font-size:45px"></i><h5>@Loc["PublishAnAd"]</h5></button>
                <a class="btn btn-lg btn-info" href="/ManageAdPrices"><i class="fas fa-money-bill-wave-alt" style="font-size:45px"></i><h5>@Loc["ManageAdPrices"]</h5></a>
            </div>
        </div>
    </div>
</section>