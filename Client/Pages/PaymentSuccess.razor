@page "/ConfirmPayment/Success/{subscriptionId}"
@inject Microsoft.Extensions.Localization.IStringLocalizer<PaymentSuccess> Localizer
@inject IHttpClientFactory HttpClientFactory
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
<div class="col-12">
    <div class="alert alert-success alert-dismissible fade show">
        <strong>@Localizer["Success"]!</strong>@Localizer["CatchPhrase"].
        <button type="button" class="close" data-dismiss="alert">&times;</button>
    </div>
    <div class="invoice">
        <div class="invoice-print">
            <div class="row">
                <div class="col-lg-12">
                    <div class="invoice-title">
                        <h2> @Localizer["LabelInvoice"]</h2>
                        <div class="invoice-number"> @Localizer["LabelOrderNumber"] @OrderNumber</div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-md-6">
                            <address>
                                <strong> @Localizer["LabelBilledTo"]</strong><br>
                                @User.FindFirstValue(ClaimTypes.Surname)  @User.FindFirstValue(ClaimTypes.GivenName) <br>
                                @User.FindFirstValue("LabelCity") <br />
                                @User.FindFirstValue("LabelCountry")
                            </address>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                        </div>
                        <div class="col-md-6 text-md-right">
                            <address>
                                <strong> @Localizer["LabelOrderDate"]</strong><br>
                                @DateTime.Now.ToLongDateString()<br><br>
                            </address>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="section-title"> @Localizer["LabelOrderSummary"]</div>
                    <p class="section-lead"> @Localizer["OrderSummaryCatchPhrase"]</p>
                    <div class="table-responsive">
                        <table class="table table-striped table-hover table-md">
                            <tr>
                                <th data-width="40">#</th>
                                <th> @Localizer["LabelItem"]</th>
                                <th class="text-center"> @Localizer["LabelPrice"]</th>
                                <th class="text-center"> @Localizer["LabelQuantity"]</th>
                                <th class="text-right"> @Localizer["LabelTotal"]</th>
                            </tr>
                            <tr>
                                <td>1</td>
                                <td> @Pack?.Label</td>
                                <td class="text-center"> @Pack?.Price</td>
                                <td class="text-center"> 1</td>
                                <td class="text-right"> @Pack?.Price</td>
                            </tr>
                        </table>
                    </div>
                    <div class="row mt-4">
                        <div class="col-lg-8">
                        </div>
                        <div class="col-lg-4 text-right">
                            <hr class="mt-2 mb-2">
                            <div class="invoice-detail-item">
                                <div class="invoice-detail-name">@Localizer["LabelTotal"]</div>
                                <div class="invoice-detail-value invoice-detail-value-lg">@Payment?.SubTotal</div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <div class="col-lg-8">
                        </div>
                        <div class="col-lg-4 text-right">
                            <hr class="mt-2 mb-2">
                            <div class="invoice-detail-item">
                                <div class="invoice-detail-name">@Localizer["VTA"]</div>
                                <div class="invoice-detail-value invoice-detail-value-lg">@Payment?.TotalTax</div>
                            </div>
                        </div>
                    </div><div class="row mt-4">
                        <div class="col-lg-8">
                        </div>
                        <div class="col-lg-4 text-right">
                            <hr class="mt-2 mb-2">
                            <div class="invoice-detail-item">
                                <div class="invoice-detail-name">@Localizer["TTC"]</div>
                                <div class="invoice-detail-value invoice-detail-value-lg">@Payment?.TotalTTc</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <hr>
    </div>
</div>

@code
{
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Parameter] public string SubscriptionId { get; set; }
    private string OrderNumber { get; set; }
    private ClaimsPrincipal User;
    private CryptoPaymentModel cryptoPaymentViewModel;
    private decimal VTA { get; set; }
    private decimal TTC { get; set; }
    public Subscription Subscription { get; set; }
    public PaymentModel Payment { get; set; }
    public SubscriptionPack Pack { get; set; }
    [Inject] public HttpClient HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authenticateSate = await AuthenticationStateTask;
        User = authenticateSate.User;

        var httpClient = HttpClientFactory.CreateClient(Configuration["Service:Api:AnonymousApiName"]);

        await httpClient.PostAsJsonAsync<EventTrackingItem>("api/EventTracker", new EventTrackingItem
        {
            Category = "Subscription",
            Key = "Success",
            CreatedDate = DateTime.UtcNow,
            Id = Guid.NewGuid(),
            UserId = User.FindFirstValue(ClaimTypes.NameIdentifier)
        });

        var getResponse = await HttpClient.GetAsync($"api/Subscription/{SubscriptionId}");
        getResponse.EnsureSuccessStatusCode();

        var json = await getResponse.Content.ReadAsStringAsync();
        Subscription = JsonConvert.DeserializeObject<Subscription>(json);

        await base.OnInitializedAsync();
    }
}