@page "/ads/payment/{MethodPayment}/{OrderNumber}"
@using Cryptocoin.Payment

@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject IHttpClientFactory HttpClientFactory
@inject Microsoft.Extensions.Localization.IStringLocalizer<Payment> Localizer
@inject NavigationManager NavigationManager

@if (Ad?.AdPrice != null)
{
    <div class="col-12">
        <div class="invoice">
            <div class="invoice-print">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="invoice-title">
                            <h2> @Localizer["LabelInvoice"]</h2>
                            <div class="invoice-number"> @Localizer["LabelOrderNumber"] @Ad.OrderNumber</div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col-md-6">
                                <address>
                                    <strong> @Localizer["LabelBilledTo"]</strong><br>
                                    @User.FindFirstValue(ClaimTypes.Surname)  @User.FindFirstValue(ClaimTypes.GivenName) <br>
                                    @User.FindFirstValue("LabelCity") <br />
                                    @User.FindFirstValue("LabelCountry")
                                </address>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <address>
                                    <strong> @Localizer["LabelPaymentMethod"]</strong><br>
                                    CryptoCoin
                                </address>
                            </div>
                            <div class="col-md-6 text-md-right">
                                <address>
                                    <strong> @Localizer["LabelOrderDate"]</strong><br>
                                    @Ad.CreateDate.ToLongDateString()<br><br>
                                </address>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-md-12">
                        <div class="section-title"> @Localizer["LabelOrderSummary"]</div>
                        <p class="section-lead"> @Localizer["OrderSummaryCatchPhrase"]</p>
                        <div class="table-responsive">
                            <table class="table table-striped table-hover table-md">
                                <tr>
                                    <th data-width="40">#</th>
                                    <th> @Localizer["LabelItem"]</th>
                                    <th class="text-center"> @Localizer["LabelPrice"]</th>
                                    <th class="text-center"> @Localizer["LabelQuantity"]</th>
                                    <th class="text-right"> @Localizer["LabelTotal"]</th>
                                </tr>
                                <tr>
                                    <td>1</td>
                                    <td> @Ad.AdPrice?.PriceName</td>
                                    <td class="text-center"> @Ad.AdPrice?.Value</td>
                                    <td class="text-center"> 1</td>
                                    <td class="text-right"> @Ad.AdPrice?.Value</td>
                                </tr>
                            </table>
                        </div>
                        <div class="row mt-4">
                            <div class="col-lg-8">
                            </div>
                            <div class="col-lg-4 text-right">
                                <hr class="mt-2 mb-2">
                                <div class="invoice-detail-item">
                                    <div class="invoice-detail-name">@Localizer["Total"]</div>
                                    <div class="invoice-detail-value invoice-detail-value-lg"> @Ad.AdPrice?.Value</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <hr>
            <div class="text-md-right">
                <div class="float-lg-left mb-lg-0 mb-3">
                    @if (MethodPayment == "1")
                    {
                        <CryptocoinPayment BeforeCallPayment="CreatePayment" CryptoConfig="cryptoPaymentViewModel"
                                           OrderNumber="@Ad.OrderNumber" Price="@Ad.AdPrice.Value" Items=@Cart PagePaymentError="/ConfirmPayment/Error"
                                           CssClass="btn btn-success btn-icon icon-left" LabelBtn="@Localizer["PayWithCrypto"]">
                        </CryptocoinPayment>
                    }
                    else if (MethodPayment == "2")
                    {
                        <button class="btn btn-primary btn-icon icon-left" @onclick="PaypalPayment"> @Localizer["PayWithPaypal"]</button>
                    }

                    <button class="btn btn-danger btn-icon icon-left" @onclick="GoToBack"><i class="fas fa-times"></i>@Localizer["CancelOrder"]</button>
                </div>
            </div>
        </div>
    </div>
}

@code{
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter] public string OrderNumber { get; set; }
    [Parameter] public string MethodPayment { get; set; }
    private List<Tuple<string, decimal>> Cart { get; set; } = new List<Tuple<string, decimal>>();
    private AdModel Ad { get; set; } = new AdModel();
    private ClaimsPrincipal User;
    private CryptoPaymentModel cryptoPaymentViewModel;
    protected override async Task OnInitializedAsync()
    {
        var authenticateSate = await authenticationStateTask;

        User = authenticateSate.User;

        var httpClient = HttpClientFactory.CreateClient("Abeer.ServerAPI");

        var resultConfig = await httpClient.GetAsync($"/api/Payments/GetConfigCrypto");

        if (resultConfig.IsSuccessStatusCode)
        {
            var jsonConfig = await resultConfig.Content.ReadAsStringAsync();
            cryptoPaymentViewModel = JsonConvert.DeserializeObject<CryptoPaymentModel>(jsonConfig);

            var getInvoice = await httpClient.GetAsync($"/api/Payments/GetInvoice/{OrderNumber}");
            if (getInvoice.IsSuccessStatusCode)
            {
                var json = await getInvoice.Content.ReadAsStringAsync();
                Ad = JsonConvert.DeserializeObject<AdModel>(json);

                var tmp = new Tuple<string, decimal>(Ad.AdPrice.PriceName, Ad.AdPrice.Value);
                Cart.Add(tmp);
                StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo("/ConfirmPayment/Error", true);
                return;
            }
        }
        else
        {
            NavigationManager.NavigateTo("/ConfirmPayment/Error", true);
            return;
        }

        await base.OnInitializedAsync();
    }

    private async Task CreatePayment()
    {
        var httpClient = HttpClientFactory.CreateClient("Abeer.ServerAPI");
        var result = await httpClient.GetAsync($"/api/Payments/create-payment-ad/{Ad.Id}/{OrderNumber}", HttpCompletionOption.ResponseContentRead);
        if (!result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/ConfirmPayment/Error", true);
            return;
        }
    }
    private void PaypalPayment()
    {
        NavigationManager.NavigateTo($"/api/Paypal/CreateAd/{Ad.Id}", true);
    }
    private void GoToBack()
    {
        NavigationManager.NavigateTo("/", true);
    }
}